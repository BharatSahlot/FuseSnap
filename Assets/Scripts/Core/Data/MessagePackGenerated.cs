// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(7)
            {
                { typeof(global::System.Collections.Generic.List<global::Game.Data.Battery>), 0 },
                { typeof(global::System.Collections.Generic.List<global::Game.Data.Fuse>), 1 },
                { typeof(global::System.Collections.Generic.List<global::Game.Data.Wire>), 2 },
                { typeof(global::Game.Data.Battery), 3 },
                { typeof(global::Game.Data.Fuse), 4 },
                { typeof(global::Game.Data.Map), 5 },
                { typeof(global::Game.Data.Wire), 6 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::Game.Data.Battery>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::Game.Data.Fuse>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::Game.Data.Wire>();
                case 3: return new MessagePack.Formatters.Game.Data.BatteryFormatter();
                case 4: return new MessagePack.Formatters.Game.Data.FuseFormatter();
                case 5: return new MessagePack.Formatters.Game.Data.MapFormatter();
                case 6: return new MessagePack.Formatters.Game.Data.WireFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Game.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class BatteryFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Game.Data.Battery>
    {

        public void Serialize(ref MessagePackWriter writer, global::Game.Data.Battery value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            value.OnBeforeSerialize();
            writer.WriteArrayHeader(4);
            writer.Write(value.T1Id);
            writer.Write(value.T2Id);
            writer.Write(value.Voltage);
            writer.Write(value.Rotation);
        }

        public global::Game.Data.Battery Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __T1Id__ = default(int);
            var __T2Id__ = default(int);
            var __Voltage__ = default(float);
            var __Rotation__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __T1Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __T2Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Voltage__ = reader.ReadSingle();
                        break;
                    case 3:
                        __Rotation__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Game.Data.Battery();
            ____result.Voltage = __Voltage__;
            ____result.Rotation = __Rotation__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FuseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Game.Data.Fuse>
    {

        public void Serialize(ref MessagePackWriter writer, global::Game.Data.Fuse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            value.OnBeforeSerialize();
            writer.WriteArrayHeader(5);
            writer.Write(value.T1Id);
            writer.Write(value.T2Id);
            writer.Write(value.Resistance);
            writer.Write(value.MaxCurrent);
            writer.Write(value.Rotation);
        }

        public global::Game.Data.Fuse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __T1Id__ = default(int);
            var __T2Id__ = default(int);
            var __Resistance__ = default(float);
            var __MaxCurrent__ = default(float);
            var __Rotation__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __T1Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __T2Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Resistance__ = reader.ReadSingle();
                        break;
                    case 3:
                        __MaxCurrent__ = reader.ReadSingle();
                        break;
                    case 4:
                        __Rotation__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Game.Data.Fuse();
            ____result.Resistance = __Resistance__;
            ____result.MaxCurrent = __MaxCurrent__;
            ____result.Rotation = __Rotation__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MapFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Game.Data.Map>
    {

        public void Serialize(ref MessagePackWriter writer, global::Game.Data.Map value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(5);
            writer.Write(value.R);
            writer.Write(value.C);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Data.Battery>>().Serialize(ref writer, value.Batteries, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Data.Fuse>>().Serialize(ref writer, value.Fuses, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Data.Wire>>().Serialize(ref writer, value.Wires, options);
        }

        public global::Game.Data.Map Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __R__ = default(int);
            var __C__ = default(int);
            var __Batteries__ = default(global::System.Collections.Generic.List<global::Game.Data.Battery>);
            var __Fuses__ = default(global::System.Collections.Generic.List<global::Game.Data.Fuse>);
            var __Wires__ = default(global::System.Collections.Generic.List<global::Game.Data.Wire>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __R__ = reader.ReadInt32();
                        break;
                    case 1:
                        __C__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Batteries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Data.Battery>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Fuses__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Data.Fuse>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Wires__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Data.Wire>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Game.Data.Map();
            ____result.R = __R__;
            ____result.C = __C__;
            ____result.Batteries = __Batteries__;
            ____result.Fuses = __Fuses__;
            ____result.Wires = __Wires__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WireFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Game.Data.Wire>
    {

        public void Serialize(ref MessagePackWriter writer, global::Game.Data.Wire value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            value.OnBeforeSerialize();
            writer.WriteArrayHeader(3);
            writer.Write(value.T1Id);
            writer.Write(value.T2Id);
            writer.Write(value.Resistance);
        }

        public global::Game.Data.Wire Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __T1Id__ = default(int);
            var __T2Id__ = default(int);
            var __Resistance__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __T1Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __T2Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Resistance__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Game.Data.Wire();
            ____result.Resistance = __Resistance__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

